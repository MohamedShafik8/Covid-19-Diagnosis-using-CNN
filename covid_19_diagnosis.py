# -*- coding: utf-8 -*-
"""Covid_19_diagnosis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GaX5TVItwCO2dAmFP8aGxnND3ZZUGX3l
"""

import numpy as np
from matplotlib import pyplot as plt
import os 
import keras
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import * 
from keras.layers import *
from google.colab import drive
drive.mount('/content/drive')

train = ImageDataGenerator(rescale=1/255)
test = ImageDataGenerator(rescale=1/255)
train_dataset = train.flow_from_directory('/content/drive/MyDrive/covid/train',
                                          target_size = (224, 224),
                                          batch_size = 10)
                                     
test_dataset = test.flow_from_directory('/content/drive/MyDrive/covid/test',
                                          target_size= (224, 224),
                                          batch_size = 10 )

train_dataset.class_indices

model = Sequential()

model.add(Conv2D(filters = 32, kernel_size = (3, 3), strides = (1, 1), activation = 'relu', padding = 'same', input_shape = (224, 224, 3)))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Conv2D(filters = 64, kernel_size = (3, 3), strides = (1, 1), padding = 'same', activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2))) 
model.add(Conv2D(filters = 128, kernel_size = (3, 3), strides = (1, 1), padding = 'same', activation ='relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Conv2D(filters = 256, kernel_size = (3, 3), strides = (1, 1), padding = 'same', activation = 'relu')) 
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Flatten()) 
model.add(Dense(128, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(3, activation='softmax'))

model.summary()

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model_fit = model.fit(train_dataset,
            steps_per_epoch = 4,
            epochs = 10,
            validation_data = test_dataset)

plt.plot(model_fit.history['accuracy'])
plt.title('Model Training Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Training Accuracy')
plt.legend(['Training'], loc='lower right')

plt.plot(model_fit.history['accuracy'])
plt.title('Model Test Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Test Accuracy')
plt.legend(['Testing'], loc = 'lower right')



